<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2013 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Template for Mage_Adminhtml_Block_Catalog_Product_Edit
 */
?>

<div class="content-header">
    <h3 class="icon-head head-products"><?php echo $this->getHeader() ?></h3>
    <p class="content-buttons form-buttons"><?php echo $this->getBackButtonHtml() ?>
    <?php echo $this->getCancelButtonHtml() ?>
    <?php if($this->getProductId()): ?>
        <?php echo $this->getDeleteButtonHtml() ?>
        <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
            <?php echo $this->getDuplicateButtonHtml() ?>
        <?php endif; ?>
    <?php endif; ?>
    <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
        <?php echo $this->getSaveButtonHtml() ?>
        <?php echo $this->getSaveAndEditButtonHtml() ?>
    <?php endif; ?>
    </p>
</div>
<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="product_edit_form" enctype="multipart/form-data">
    <?php echo $this->getBlockHtml('formkey')?>
    <div style="display:none"></div>
</form>
<script type="text/javascript">
//<![CDATA[
    var productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
    var productForm = new varienForm('product_edit_form', '<?php echo $this->getValidationUrl() ?>');
    productForm._processValidationResult = function(transport) {
        var response = transport.responseText.evalJSON();
        if (response.error){
            if (response.attribute && $(response.attribute)) {
                $(response.attribute).setHasError(true, productForm);
                Validation.ajaxError($(response.attribute), response.message);
                if (!Prototype.Browser.IE){
                    $(response.attribute).focus();
                }
            }
            else if ($('messages')) {
                $('messages').innerHTML = '<ul class="messages"><li class="error-msg"><ul><li>' + response.message + '</li></ul></li></ul>';
            }
        }
        else{
            productForm._submit();
        }
    };
    function saveAndContinueEdit(urlTemplate) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        var url = template.evaluate({tab_id:product_info_tabsJsTabs.activeTab.id});
        productForm.submit(url);
    }
    function setSettings(urlTemplate, setElement, typeElement) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        setLocation(template.evaluate({attribute_set:$F(setElement),type:$F(typeElement)}));
    }

     function setSuperSettings(urlTemplate, attributesClass, validateField) {
        var attributesFields = $$('.' + attributesClass);
        var attributes = Form.serializeElements(attributesFields, true).attribute;
        if(typeof attributes == 'string') {
            attributes = [attributes];
        }

        if(!attributes) {
            $(validateField).value = 'no-attributes';
        } else {
            $(validateField).value = 'has-attributes';
        }

        if (productForm.validator.validate()) {
            var template = new Template(urlTemplate, productTemplateSyntax);
            var url = template.evaluate({
                attributes: encode_base64(attributes.join(',')).replace(new RegExp('/','g'),'%2F').replace(new RegExp('=','g'),'%3D')
            });
            setLocation(url);
        }
    }

    function checkMaxLength(Object, MaxLen)
    {
        if (Object.value.length > MaxLen-1) {
            Object.value = Object.value.substr(0, MaxLen);
        }
        return 1;
    }

    Event.observe(window, 'load', function() {
        var objName = '<?php echo $this->getSelectedTabId() ?>';
        if (objName) {
            obj = $(objName);
            //IE fix (bubbling event model)
            product_info_tabsJsTabs.setSkipDisplayFirstTab();
            product_info_tabsJsTabs.showTabContent(obj);
        }
        Product.AttributesBridge.setTabsObject(product_info_tabsJsTabs);
    });

    /**
     * Function to get the text from a selected option
     */
    Element.addMethods("SELECT", (function() {
        function getSelectedOptionHTML(element) {
            if (!(element = $(element))) return;
            var index = element.selectedIndex;
            return index >= 0 ? element.options[index].innerHTML : undefined;
        }

        // Function to disable an option by value
        function disableOption(element, valueToDisable) {
            var options = $(element).select('option');
            if(options.length > 0) {
                for(i = 0; i < options.length; i++) {
                    var option = options[i];
                    if (option.value == valueToDisable) {
                        option.disabled = true;
                    }
                }
            }
        }

        // Function to disable an option by label
        function disableOptionByLabel(element, labelToDisable) {
            var options = $(element).select('option');
            if(options.length > 0) {
                for(i = 0; i < options.length; i++) {
                    var option = options[i];
                    if (option.innerHTML.toLowerCase() == labelToDisable.toLowerCase()) {
                        option.disabled = true;
                    }
                }
            }
        }

        // Function to enable an option by value
        function enableOption(element, valueToEnable) {
            var options = $(element).select('option');
            if(options.length > 0) {
                for(i = 0; i < options.length; i++) {
                    var option = options[i];
                    if (option.value == valueToEnable) {
                        option.disabled = false;
                    }
                }
            }
        }

        // Function to enable an option by label
        function enableOptionByLabel(element, labelToEnable) {
            var options = $(element).select('option');
            if(options.length > 0) {
                for(i = 0; i < options.length; i++) {
                    var option = options[i];
                    if (option.innerHTML.toLowerCase() == labelToEnable.toLowerCase()) {
                        option.disabled = false;
                    }
                }
            }
        }

        return {
            getSelectedOptionHTML: getSelectedOptionHTML,
            disableOption: disableOption,
            disableOptionByLabel: disableOptionByLabel,
            enableOption: enableOption,
            enableOptionByLabel: enableOptionByLabel
        };
    })());

    Validation.addAllThese([
        ['validate-super-product-attributes', '<?php echo Mage::helper('catalog')->__('Please select one or more attributes.') ?>', function(v) {
            return (v != "no-attributes");
        }]
    ]);

    /**
     * Add listener to change event on partnership_type
     */
    Event.observe('partnership_type', 'change', function () {
        var crossBorderId = 'cross_border';
        var expressShippingId = 'express_shipping';
        var partnershipTypeLabel = $('partnership_type').getSelectedOptionHTML().toLowerCase();
        switch(partnershipTypeLabel) {
            case '':
            case '-':
            case 'consignment':
            case 'outright':
                $(crossBorderId).setValue(0); // Set the value to No
                break;
            case 'dropship' :
                $(expressShippingId).setValue(0); // Set the value to No
                break;
            case 'special order':
                $(crossBorderId).setValue(0); // Set the value to No
                $(expressShippingId).setValue(0); // Set the value to No
                break;
            default:
                break;
        }
    });

    /**
     * Add listener to change event on express_shipping dropdown
     */
    Event.observe('express_shipping', 'change', function () {
        var expressShippingValue = parseInt($('express_shipping').getValue());
        var partnershipTypeId = 'partnership_type';
        switch(expressShippingValue) {
            case 1:
                // If the current Partnership type is dropship or special order, set the value to unselected
                var partnershipTypeLabel = $('partnership_type').getSelectedOptionHTML().toLowerCase();
                switch(partnershipTypeLabel) {
                    case 'dropship':
                    case 'special order':
                        $(partnershipTypeId).setValue(''); // Set the value to No
                        break;
                }
                $(partnershipTypeId).disableOptionByLabel('dropship'); // Disable the 'dropship' option
                $(partnershipTypeId).disableOptionByLabel('special order'); // Disable the 'special order' option
                break;
            default:
                $(partnershipTypeId).enableOptionByLabel('dropship'); // Enable the 'dropship' option
                $(partnershipTypeId).enableOptionByLabel('special order'); // Enable the 'special order' option
                break;
        }
    });

    /**
     * Add listener to change event on backorders
     */
    Event.observe('inventory_backorders', 'change', function () {
        var crossBorderId = 'cross_border';
        var partnershipTypeLabel = $('inventory_backorders').getSelectedOptionHTML().toLowerCase();
        switch(partnershipTypeLabel) {
            case 'allow qty below 0':
            case 'allow qty below 0 and notify customer':
                $(crossBorderId).setValue(0); // Set the value to No
                break;
            default:
                break;
        }
    });

    /**
     * Add listener to change event on cross_border dropdown
     */
    Event.observe('cross_border', 'change', function () {
        var crossBorderValue = parseInt($('cross_border').getValue());
        var partnershipTypeId = 'partnership_type';
        var backorderId = 'inventory_backorders';
        <?php $allPartnership = Mage::getModel('common/partnershiptype')->getActivePartnershipType(); ?>
        switch(crossBorderValue) {
            case 1:
                // disable all partnership type
                $(partnershipTypeId).disableOptionByLabel('');
                $(partnershipTypeId).disableOptionByLabel('-');
            <?php foreach ($allPartnership as $id => $text) : ?>
            <?php if ($text != '-') : ?>
                $(partnershipTypeId).disableOption(<?php echo $id; ?>);
            <?php endif; ?>
            <?php if (strtolower($text) == 'dropship') : ?>
                $(partnershipTypeId).setValue(<?php echo $id; ?>);
            <?php endif; ?>
            <?php endforeach; ?>
                // disable all backorder except 'no backorder'
                $(backorderId).disableOption(1);
                $(backorderId).disableOption(2);
                $(backorderId).setValue(0);
            <?php
            $allowedCBPartnershipTypeIds = Mage::getStoreConfig('bilna_crossborder/status/allowed_partnership');
            $allowedCBPartnershipTypeId = explode(',', $allowedCBPartnershipTypeIds);
            foreach ($allowedCBPartnershipTypeId as $partnershipId) :
            ?>
                $(partnershipTypeId).enableOption(<?php echo $partnershipId; ?>);
            <?php endforeach; ?>
                break;
            default:
                // enable all partnership type
                $(partnershipTypeId).enableOptionByLabel('');
                $(partnershipTypeId).enableOptionByLabel('-');
            <?php foreach ($allPartnership as $id => $text) : ?>
            <?php if ($text != '-') : ?>
                $(partnershipTypeId).enableOption(<?php echo $id; ?>);
            <?php endif; ?>
            <?php endforeach; ?>
                // enable all backorder
                $(backorderId).enableOption(1);
                $(backorderId).enableOption(2);
                break;
        }
    });
//]]>
</script>
